{"mappings":"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","sources":["<anon>","script.js","node_modules/arabic-reshaper/index.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n// Import the library\nvar $ae717106aef8929f$exports = {};\n/**\n * Javascript Arabic Reshaper by Louy Alakkad\n * https://github.com/louy/Javascript-Arabic-Reshaper\n * Based on (http://git.io/vsnAd)\n */ (function(root, factory) {\n    var name = \"ArabicReshaper\";\n    /* global define, module */ /* istanbul ignore next */ if (typeof define === \"function\" && define.amd) // AMD. Register as an anonymous module.\n    define(factory);\n    else if (0, $ae717106aef8929f$exports) $ae717106aef8929f$exports = factory();\n    else // Browser globals\n    root[name] = factory();\n})($ae717106aef8929f$exports, function() {\n    var charsMap = [\n        /* code,isolated,initial, medial, final */ [\n            0x0621,\n            0xFE80,\n            null,\n            null,\n            null\n        ],\n        /* HAMZA */ [\n            0x0622,\n            0xFE81,\n            null,\n            null,\n            0xFE82\n        ],\n        /* ALEF_MADDA */ [\n            0x0623,\n            0xFE83,\n            null,\n            null,\n            0xFE84\n        ],\n        /* ALEF_HAMZA_ABOVE */ [\n            0x0624,\n            0xFE85,\n            null,\n            null,\n            0xFE86\n        ],\n        /* WAW_HAMZA */ [\n            0x0625,\n            0xFE87,\n            null,\n            null,\n            0xFE88\n        ],\n        /* ALEF_HAMZA_BELOW */ [\n            0x0626,\n            0xFE89,\n            0xFE8B,\n            0xFE8C,\n            0xFE8A\n        ],\n        /* YEH_HAMZA */ [\n            0x0627,\n            0xFE8D,\n            null,\n            null,\n            0xFE8E\n        ],\n        /* ALEF */ [\n            0x0628,\n            0xFE8F,\n            0xFE91,\n            0xFE92,\n            0xFE90\n        ],\n        /* BEH */ [\n            0x0629,\n            0xFE93,\n            null,\n            null,\n            0xFE94\n        ],\n        /* TEH_MARBUTA */ [\n            0x062A,\n            0xFE95,\n            0xFE97,\n            0xFE98,\n            0xFE96\n        ],\n        /* TEH */ [\n            0x062B,\n            0xFE99,\n            0xFE9B,\n            0xFE9C,\n            0xFE9A\n        ],\n        /* THEH */ [\n            0x062C,\n            0xFE9D,\n            0xFE9F,\n            0xFEA0,\n            0xFE9E\n        ],\n        /* JEEM */ [\n            0x062D,\n            0xFEA1,\n            0xFEA3,\n            0xFEA4,\n            0xFEA2\n        ],\n        /* HAH */ [\n            0x062E,\n            0xFEA5,\n            0xFEA7,\n            0xFEA8,\n            0xFEA6\n        ],\n        /* KHAH */ [\n            0x062F,\n            0xFEA9,\n            null,\n            null,\n            0xFEAA\n        ],\n        /* DAL */ [\n            0x0630,\n            0xFEAB,\n            null,\n            null,\n            0xFEAC\n        ],\n        /* THAL */ [\n            0x0631,\n            0xFEAD,\n            null,\n            null,\n            0xFEAE\n        ],\n        /* REH */ [\n            0x0632,\n            0xFEAF,\n            null,\n            null,\n            0xFEB0\n        ],\n        /* ZAIN */ [\n            0x0633,\n            0xFEB1,\n            0xFEB3,\n            0xFEB4,\n            0xFEB2\n        ],\n        /* SEEN */ [\n            0x0634,\n            0xFEB5,\n            0xFEB7,\n            0xFEB8,\n            0xFEB6\n        ],\n        /* SHEEN */ [\n            0x0635,\n            0xFEB9,\n            0xFEBB,\n            0xFEBC,\n            0xFEBA\n        ],\n        /* SAD */ [\n            0x0636,\n            0xFEBD,\n            0xFEBF,\n            0xFEC0,\n            0xFEBE\n        ],\n        /* DAD */ [\n            0x0637,\n            0xFEC1,\n            0xFEC3,\n            0xFEC4,\n            0xFEC2\n        ],\n        /* TAH */ [\n            0x0638,\n            0xFEC5,\n            0xFEC7,\n            0xFEC8,\n            0xFEC6\n        ],\n        /* ZAH */ [\n            0x0639,\n            0xFEC9,\n            0xFECB,\n            0xFECC,\n            0xFECA\n        ],\n        /* AIN */ [\n            0x063A,\n            0xFECD,\n            0xFECF,\n            0xFED0,\n            0xFECE\n        ],\n        /* GHAIN */ [\n            0x0640,\n            0x0640,\n            0x0640,\n            0x0640,\n            0x0640\n        ],\n        /* TATWEEL */ [\n            0x0641,\n            0xFED1,\n            0xFED3,\n            0xFED4,\n            0xFED2\n        ],\n        /* FEH */ [\n            0x0642,\n            0xFED5,\n            0xFED7,\n            0xFED8,\n            0xFED6\n        ],\n        /* QAF */ [\n            0x0643,\n            0xFED9,\n            0xFEDB,\n            0xFEDC,\n            0xFEDA\n        ],\n        /* KAF */ [\n            0x0644,\n            0xFEDD,\n            0xFEDF,\n            0xFEE0,\n            0xFEDE\n        ],\n        /* LAM */ [\n            0x0645,\n            0xFEE1,\n            0xFEE3,\n            0xFEE4,\n            0xFEE2\n        ],\n        /* MEEM */ [\n            0x0646,\n            0xFEE5,\n            0xFEE7,\n            0xFEE8,\n            0xFEE6\n        ],\n        /* NOON */ [\n            0x0647,\n            0xFEE9,\n            0xFEEB,\n            0xFEEC,\n            0xFEEA\n        ],\n        /* HEH */ [\n            0x0648,\n            0xFEED,\n            null,\n            null,\n            0xFEEE\n        ],\n        /* WAW */ [\n            0x0649,\n            0xFEEF,\n            null,\n            null,\n            0xFEF0\n        ],\n        /* ALEF_MAKSURA */ [\n            0x064A,\n            0xFEF1,\n            0xFEF3,\n            0xFEF4,\n            0xFEF2\n        ],\n        /* YEH */ [\n            0x067E,\n            0xFB56,\n            0xFB58,\n            0xFB59,\n            0xFB57\n        ],\n        /* PEH */ [\n            0x06CC,\n            0xFBFC,\n            0xFBFE,\n            0xFBFF,\n            0xFBFD\n        ],\n        /* Farsi Yeh */ [\n            0x0686,\n            0xFB7A,\n            0xFB7C,\n            0xFB7D,\n            0xFB7B\n        ],\n        /* Tcheh */ [\n            0x06A9,\n            0xFB8E,\n            0xFB90,\n            0xFB91,\n            0xFB8F\n        ],\n        /* Keheh */ [\n            0x06AF,\n            0xFB92,\n            0xFB94,\n            0xFB95,\n            0xFB93\n        ],\n        /* Gaf */ [\n            0x0698,\n            0xFB8A,\n            null,\n            null,\n            0xFB8B\n        ]\n    ], combCharsMap = [\n        [\n            [\n                0x0644,\n                0x0622\n            ],\n            0xFEF5,\n            null,\n            null,\n            0xFEF6\n        ],\n        /* LAM_ALEF_MADDA */ [\n            [\n                0x0644,\n                0x0623\n            ],\n            0xFEF7,\n            null,\n            null,\n            0xFEF8\n        ],\n        /* LAM_ALEF_HAMZA_ABOVE */ [\n            [\n                0x0644,\n                0x0625\n            ],\n            0xFEF9,\n            null,\n            null,\n            0xFEFA\n        ],\n        /* LAM_ALEF_HAMZA_BELOW */ [\n            [\n                0x0644,\n                0x0627\n            ],\n            0xFEFB,\n            null,\n            null,\n            0xFEFC\n        ]\n    ], transChars = [\n        0x0610,\n        /* ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM */ 0x0612,\n        /* ARABIC SIGN ALAYHE ASSALLAM */ 0x0613,\n        /* ARABIC SIGN RADI ALLAHOU ANHU */ 0x0614,\n        /* ARABIC SIGN TAKHALLUS */ 0x0615,\n        /* ARABIC SMALL HIGH TAH */ 0x064B,\n        /* ARABIC FATHATAN */ 0x064C,\n        /* ARABIC DAMMATAN */ 0x064D,\n        /* ARABIC KASRATAN */ 0x064E,\n        /* ARABIC FATHA */ 0x064F,\n        /* ARABIC DAMMA */ 0x0650,\n        /* ARABIC KASRA */ 0x0651,\n        /* ARABIC SHADDA */ 0x0652,\n        /* ARABIC SUKUN */ 0x0653,\n        /* ARABIC MADDAH ABOVE */ 0x0654,\n        /* ARABIC HAMZA ABOVE */ 0x0655,\n        /* ARABIC HAMZA BELOW */ 0x0656,\n        /* ARABIC SUBSCRIPT ALEF */ 0x0657,\n        /* ARABIC INVERTED DAMMA */ 0x0658,\n        /* ARABIC MARK NOON GHUNNA */ 0x0670,\n        /* ARABIC LETTER SUPERSCRIPT ALEF */ 0x06D6,\n        /* ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA */ 0x06D7,\n        /* ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA */ 0x06D8,\n        /* ARABIC SMALL HIGH MEEM INITIAL FORM */ 0x06D9,\n        /* ARABIC SMALL HIGH LAM ALEF */ 0x06DA,\n        /* ARABIC SMALL HIGH JEEM */ 0x06DB,\n        /* ARABIC SMALL HIGH THREE DOTS */ 0x06DC,\n        /* ARABIC SMALL HIGH SEEN */ 0x06DF,\n        /* ARABIC SMALL HIGH ROUNDED ZERO */ 0x06E0,\n        /* ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO */ 0x06E1,\n        /* ARABIC SMALL HIGH DOTLESS HEAD OF KHAH */ 0x06E2,\n        /* ARABIC SMALL HIGH MEEM ISOLATED FORM */ 0x06E3,\n        /* ARABIC SMALL LOW SEEN */ 0x06E4,\n        /* ARABIC SMALL HIGH MADDA */ 0x06E7,\n        /* ARABIC SMALL HIGH YEH */ 0x06E8,\n        /* ARABIC SMALL HIGH NOON */ 0x06EA,\n        /* ARABIC EMPTY CENTRE LOW STOP */ 0x06EB,\n        /* ARABIC EMPTY CENTRE HIGH STOP */ 0x06EC,\n        /* ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE */ 0x06ED\n    ];\n    function characterMapContains(c) {\n        for(var i = 0; i < charsMap.length; ++i){\n            if (charsMap[i][0] === c) return true;\n        }\n        return false;\n    }\n    function getCharRep(c) {\n        for(var i = 0; i < charsMap.length; ++i){\n            if (charsMap[i][0] === c) return charsMap[i];\n        }\n        return false;\n    }\n    function getCombCharRep(c1, c2) {\n        for(var i = 0; i < combCharsMap.length; ++i){\n            if (combCharsMap[i][0][0] === c1 && combCharsMap[i][0][1] === c2) return combCharsMap[i];\n        }\n        // We should never reach here...\n        // istanbul ignore next\n        return false;\n    }\n    function isTransparent(c) {\n        for(var i = 0; i < transChars.length; ++i){\n            if (transChars[i] === c) return true;\n        }\n        return false;\n    }\n    function getOriginalCharsFromCode(code) {\n        var j;\n        for(j = 0; j < charsMap.length; ++j){\n            if (charsMap[j].indexOf(code) > -1) return String.fromCharCode(charsMap[j][0]);\n        }\n        for(j = 0; j < combCharsMap.length; ++j){\n            if (combCharsMap[j].indexOf(code) > -1) return String.fromCharCode(combCharsMap[j][0][0]) + String.fromCharCode(combCharsMap[j][0][1]);\n        }\n        return String.fromCharCode(code);\n    }\n    return {\n        convertArabic: function(normal) {\n            var crep, combcrep, shaped = \"\";\n            for(var i = 0; i < normal.length; ++i){\n                var current = normal.charCodeAt(i);\n                if (characterMapContains(current)) {\n                    var prev = null, next = null, prevID = i - 1, nextID = i + 1;\n                    /*\n           Transparent characters have no effect in the shaping process.\n           So, ignore all the transparent characters that are BEFORE the\n           current character.\n           */ for(; prevID >= 0; --prevID){\n                        if (!isTransparent(normal.charCodeAt(prevID))) break;\n                    }\n                    prev = prevID >= 0 ? normal.charCodeAt(prevID) : null;\n                    crep = prev ? getCharRep(prev) : false;\n                    if (!crep || crep[2] == null && crep[3] == null) prev = null; // prev character doesn’t connect with its successor\n                    /*\n           Transparent characters have no effect in the shaping process.\n           So, ignore all the transparent characters that are AFTER the\n           current character.\n           */ for(; nextID < normal.length; ++nextID){\n                        if (!isTransparent(normal.charCodeAt(nextID))) break;\n                    }\n                    next = nextID < normal.length ? normal.charCodeAt(nextID) : null;\n                    crep = next ? getCharRep(next) : false;\n                    if (!crep || crep[3] == null && crep[4] == null) next = null; // next character doesn’t connect with its predecessor\n                    /* Combinations */ if (current === 0x0644 && next != null && (next === 0x0622 || next === 0x0623 || next === 0x0625 || next === 0x0627)) {\n                        combcrep = getCombCharRep(current, next);\n                        if (prev != null) shaped += String.fromCharCode(combcrep[4]);\n                        else shaped += String.fromCharCode(combcrep[1]);\n                        ++i;\n                        continue;\n                    }\n                    crep = getCharRep(current);\n                    /* Medial */ if (prev != null && next != null && crep[3] != null) {\n                        shaped += String.fromCharCode(crep[3]);\n                        continue;\n                    } else /* Final */ if (prev != null && crep[4] != null) {\n                        shaped += String.fromCharCode(crep[4]);\n                        continue;\n                    } else /* Initial */ if (next != null && crep[2] != null) {\n                        shaped += String.fromCharCode(crep[2]);\n                        continue;\n                    } else shaped += String.fromCharCode(crep[1]);\n                } else shaped += String.fromCharCode(current);\n            }\n            return shaped;\n        },\n        // convert from Arabic Presentation Forms B\n        convertArabicBack: function(apfb) {\n            var toReturn = \"\", selectedChar;\n            var i;\n            theLoop: for(i = 0; i < apfb.length; ++i){\n                selectedChar = apfb.charCodeAt(i);\n                toReturn += getOriginalCharsFromCode(selectedChar);\n            }\n            return toReturn;\n        }\n    };\n});\n\n\nlet $c1ce9d969bfa6909$var$element = document.getElementById(\"effect\");\nlet $c1ce9d969bfa6909$var$unicodeVal = document.getElementById(\"unicode-value\");\nlet $c1ce9d969bfa6909$var$originalString = $c1ce9d969bfa6909$var$element.innerText;\nconsole.log($c1ce9d969bfa6909$var$originalString);\n// This can be a plain string. I just want to make sure I am feeding\n// it the \"plain\" letter, not the initial/middle/end forms\n// const originalString = String.fromCharCode(0x0636, 0x0636); // ضض\n// This will convert it to the 'shaped' letters. That means the letters\n// will be transformed into the 'initial/middle/end' forms in the string\n// (not just when it draws to the screen).\nconst $c1ce9d969bfa6909$var$arabicString = (0, (/*@__PURE__*/$parcel$interopDefault($ae717106aef8929f$exports))).convertArabic($c1ce9d969bfa6909$var$originalString);\n// And get the values. These will be the specific initial/middle/end values, not the generic ones\nconsole.log($c1ce9d969bfa6909$var$arabicString.codePointAt(0).toString(16), $c1ce9d969bfa6909$var$arabicString.codePointAt(1).toString(16) // outputs fedf\n);\n// Wrap each Arabic character in a span\nlet $c1ce9d969bfa6909$var$spanWrapper = \"\";\n// Loop through each character and wrap it in a span\nfor(let i = 0; i < $c1ce9d969bfa6909$var$arabicString.length; i++){\n    if ($c1ce9d969bfa6909$var$arabicString[i] !== \" \") $c1ce9d969bfa6909$var$spanWrapper += `<span class=\"effect--span\">${$c1ce9d969bfa6909$var$arabicString.charAt(i)}</span>`;\n    else // If it's a space, then don't wrap it in a span and add a space as-is\n    $c1ce9d969bfa6909$var$spanWrapper += \" \";\n    // Replace the text container with the new HTML structure\n    $c1ce9d969bfa6909$var$element.innerHTML = $c1ce9d969bfa6909$var$spanWrapper;\n}\nlet $c1ce9d969bfa6909$var$spanEffect = document.querySelectorAll(\".effect--span\");\nconst $c1ce9d969bfa6909$var$isolatedUnicodes = [\n    \"fe8d\",\n    \"fe95\",\n    \"fe99\",\n    \"fe9d\",\n    \"fea1\",\n    \"fea5\",\n    \"fea9\",\n    \"feab\",\n    \"fead\",\n    \"feaf\",\n    \"feb1\",\n    \"feb5\",\n    \"feb9\",\n    \"febd\",\n    \"fec1\",\n    \"fec5\",\n    \"fec9\",\n    \"fecd\",\n    \"fed1\",\n    \"fed5\",\n    \"fed9\",\n    \"fedb\",\n    \"fee1\",\n    \"fee5\",\n    \"fee9\",\n    \"feed\",\n    \"fef1\",\n    \"fe81\",\n    \"fe93\",\n    \"feef\"\n];\n$c1ce9d969bfa6909$var$spanEffect.forEach((span)=>{\n    let character = span.innerText;\n    let unicode = character.codePointAt(0).toString(16);\n    if ($c1ce9d969bfa6909$var$isolatedUnicodes.includes(unicode)) span.style.color = \"red\";\n    span.onmousemove = function() {\n        if ($c1ce9d969bfa6909$var$isolatedUnicodes.includes(unicode)) span.innerHTML += \"\";\n        else span.innerHTML += \"\\u0640\";\n        $c1ce9d969bfa6909$var$unicodeVal.innerHTML = unicode;\n    };\n});\n\n\n//# sourceMappingURL=index.db6212b9.js.map\n","// Import the library\nimport ArabicReshaper from 'arabic-reshaper';\n\nlet element = document.getElementById('effect');\nlet unicodeVal = document.getElementById('unicode-value');\nlet originalString = element.innerText;\n\nconsole.log(originalString);\n\n// This can be a plain string. I just want to make sure I am feeding\n// it the \"plain\" letter, not the initial/middle/end forms\n// const originalString = String.fromCharCode(0x0636, 0x0636); // ضض\n\n// This will convert it to the 'shaped' letters. That means the letters\n// will be transformed into the 'initial/middle/end' forms in the string\n// (not just when it draws to the screen).\nconst arabicString = ArabicReshaper.convertArabic(originalString);\n\n// And get the values. These will be the specific initial/middle/end values, not the generic ones\nconsole.log(\n    arabicString.codePointAt(0).toString(16), // outputs fe8d\n    arabicString.codePointAt(1).toString(16)  // outputs fedf\n);\n\n// Wrap each Arabic character in a span\nlet spanWrapper = '';\n\n// Loop through each character and wrap it in a span\nfor (let i = 0; i < arabicString.length; i++) {\n    if(arabicString[i] !== ' ') {\n    spanWrapper += `<span class=\"effect--span\">${arabicString.charAt(i)}</span>`;\n    } else {\n        // If it's a space, then don't wrap it in a span and add a space as-is\n        spanWrapper += ' ';\n    }\n\n    // Replace the text container with the new HTML structure\n    element.innerHTML = spanWrapper;\n }\n\nlet spanEffect = document.querySelectorAll('.effect--span');\n\nconst isolatedUnicodes = ['fe8d', 'fe95', 'fe99', 'fe9d', 'fea1', 'fea5', 'fea9', 'feab', 'fead', 'feaf', 'feb1', 'feb5', 'feb9', 'febd', 'fec1', 'fec5', 'fec9', 'fecd', 'fed1', 'fed5', 'fed9', 'fedb', 'fee1', 'fee5', 'fee9', 'feed', 'fef1', 'fe81', 'fe93', 'feef']\n\nspanEffect.forEach((span) => {\n    let character = span.innerText;\n    let unicode = character.codePointAt(0).toString(16);\n\n    if(isolatedUnicodes.includes(unicode)) {\n        span.style.color = 'red';\n    }\n\nspan.onmousemove = function() {\n\n\n    if(isolatedUnicodes.includes(unicode)) {\n        span.innerHTML += '';\n    } else {\n        span.innerHTML += 'ـ'\n    }\n\n    unicodeVal.innerHTML = unicode;\n}\n})","/**\n * Javascript Arabic Reshaper by Louy Alakkad\n * https://github.com/louy/Javascript-Arabic-Reshaper\n * Based on (http://git.io/vsnAd)\n */\n(function(root, factory) {\n  var name = 'ArabicReshaper';\n  /* global define, module */\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root[name] = factory();\n  }\n}(this, function() {\n\n  var charsMap = [\n      /* code,isolated,initial, medial, final */\n      [0x0621, 0xFE80,   null,   null,   null], /* HAMZA */\n      [0x0622, 0xFE81,   null,   null, 0xFE82], /* ALEF_MADDA */\n      [0x0623, 0xFE83,   null,   null, 0xFE84], /* ALEF_HAMZA_ABOVE */\n      [0x0624, 0xFE85,   null,   null, 0xFE86], /* WAW_HAMZA */\n      [0x0625, 0xFE87,   null,   null, 0xFE88], /* ALEF_HAMZA_BELOW */\n      [0x0626, 0xFE89, 0xFE8B, 0xFE8C, 0xFE8A], /* YEH_HAMZA */\n      [0x0627, 0xFE8D,   null,   null, 0xFE8E], /* ALEF */\n      [0x0628, 0xFE8F, 0xFE91, 0xFE92, 0xFE90], /* BEH */\n      [0x0629, 0xFE93,   null,   null, 0xFE94], /* TEH_MARBUTA */\n      [0x062A, 0xFE95, 0xFE97, 0xFE98, 0xFE96], /* TEH */\n      [0x062B, 0xFE99, 0xFE9B, 0xFE9C, 0xFE9A], /* THEH */\n      [0x062C, 0xFE9D, 0xFE9F, 0xFEA0, 0xFE9E], /* JEEM */\n      [0x062D, 0xFEA1, 0xFEA3, 0xFEA4, 0xFEA2], /* HAH */\n      [0x062E, 0xFEA5, 0xFEA7, 0xFEA8, 0xFEA6], /* KHAH */\n      [0x062F, 0xFEA9,   null,   null, 0xFEAA], /* DAL */\n      [0x0630, 0xFEAB,   null,   null, 0xFEAC], /* THAL */\n      [0x0631, 0xFEAD,   null,   null, 0xFEAE], /* REH */\n      [0x0632, 0xFEAF,   null,   null, 0xFEB0], /* ZAIN */\n      [0x0633, 0xFEB1, 0xFEB3, 0xFEB4, 0xFEB2], /* SEEN */\n      [0x0634, 0xFEB5, 0xFEB7, 0xFEB8, 0xFEB6], /* SHEEN */\n      [0x0635, 0xFEB9, 0xFEBB, 0xFEBC, 0xFEBA], /* SAD */\n      [0x0636, 0xFEBD, 0xFEBF, 0xFEC0, 0xFEBE], /* DAD */\n      [0x0637, 0xFEC1, 0xFEC3, 0xFEC4, 0xFEC2], /* TAH */\n      [0x0638, 0xFEC5, 0xFEC7, 0xFEC8, 0xFEC6], /* ZAH */\n      [0x0639, 0xFEC9, 0xFECB, 0xFECC, 0xFECA], /* AIN */\n      [0x063A, 0xFECD, 0xFECF, 0xFED0, 0xFECE], /* GHAIN */\n      [0x0640, 0x0640, 0x0640, 0x0640, 0x0640], /* TATWEEL */\n      [0x0641, 0xFED1, 0xFED3, 0xFED4, 0xFED2], /* FEH */\n      [0x0642, 0xFED5, 0xFED7, 0xFED8, 0xFED6], /* QAF */\n      [0x0643, 0xFED9, 0xFEDB, 0xFEDC, 0xFEDA], /* KAF */\n      [0x0644, 0xFEDD, 0xFEDF, 0xFEE0, 0xFEDE], /* LAM */\n      [0x0645, 0xFEE1, 0xFEE3, 0xFEE4, 0xFEE2], /* MEEM */\n      [0x0646, 0xFEE5, 0xFEE7, 0xFEE8, 0xFEE6], /* NOON */\n      [0x0647, 0xFEE9, 0xFEEB, 0xFEEC, 0xFEEA], /* HEH */\n      [0x0648, 0xFEED,   null,   null, 0xFEEE], /* WAW */\n      [0x0649, 0xFEEF,   null,   null, 0xFEF0], /* ALEF_MAKSURA */\n      [0x064A, 0xFEF1, 0xFEF3, 0xFEF4, 0xFEF2], /* YEH */\n      [0x067E, 0xFB56, 0xFB58, 0xFB59, 0xFB57], /* PEH */\n      [0x06CC, 0xFBFC, 0xFBFE, 0xFBFF, 0xFBFD], /* Farsi Yeh */\n      [0x0686, 0xFB7A, 0xFB7C, 0xFB7D, 0xFB7B], /* Tcheh */\n      [0x06A9, 0xFB8E, 0xFB90, 0xFB91, 0xFB8F], /* Keheh */\n      [0x06AF, 0xFB92, 0xFB94, 0xFB95, 0xFB93], /* Gaf */\n      [0x0698, 0xFB8A,   null,   null, 0xFB8B], /* Jeh */\n    ],\n    combCharsMap = [\n      [[0x0644, 0x0622], 0xFEF5, null, null, 0xFEF6], /* LAM_ALEF_MADDA */\n      [[0x0644, 0x0623], 0xFEF7, null, null, 0xFEF8], /* LAM_ALEF_HAMZA_ABOVE */\n      [[0x0644, 0x0625], 0xFEF9, null, null, 0xFEFA], /* LAM_ALEF_HAMZA_BELOW */\n      [[0x0644, 0x0627], 0xFEFB, null, null, 0xFEFC], /* LAM_ALEF */\n    ],\n    transChars = [\n      0x0610, /* ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM */\n      0x0612, /* ARABIC SIGN ALAYHE ASSALLAM */\n      0x0613, /* ARABIC SIGN RADI ALLAHOU ANHU */\n      0x0614, /* ARABIC SIGN TAKHALLUS */\n      0x0615, /* ARABIC SMALL HIGH TAH */\n      0x064B, /* ARABIC FATHATAN */\n      0x064C, /* ARABIC DAMMATAN */\n      0x064D, /* ARABIC KASRATAN */\n      0x064E, /* ARABIC FATHA */\n      0x064F, /* ARABIC DAMMA */\n      0x0650, /* ARABIC KASRA */\n      0x0651, /* ARABIC SHADDA */\n      0x0652, /* ARABIC SUKUN */\n      0x0653, /* ARABIC MADDAH ABOVE */\n      0x0654, /* ARABIC HAMZA ABOVE */\n      0x0655, /* ARABIC HAMZA BELOW */\n      0x0656, /* ARABIC SUBSCRIPT ALEF */\n      0x0657, /* ARABIC INVERTED DAMMA */\n      0x0658, /* ARABIC MARK NOON GHUNNA */\n      0x0670, /* ARABIC LETTER SUPERSCRIPT ALEF */\n      0x06D6, /* ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA */\n      0x06D7, /* ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA */\n      0x06D8, /* ARABIC SMALL HIGH MEEM INITIAL FORM */\n      0x06D9, /* ARABIC SMALL HIGH LAM ALEF */\n      0x06DA, /* ARABIC SMALL HIGH JEEM */\n      0x06DB, /* ARABIC SMALL HIGH THREE DOTS */\n      0x06DC, /* ARABIC SMALL HIGH SEEN */\n      0x06DF, /* ARABIC SMALL HIGH ROUNDED ZERO */\n      0x06E0, /* ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO */\n      0x06E1, /* ARABIC SMALL HIGH DOTLESS HEAD OF KHAH */\n      0x06E2, /* ARABIC SMALL HIGH MEEM ISOLATED FORM */\n      0x06E3, /* ARABIC SMALL LOW SEEN */\n      0x06E4, /* ARABIC SMALL HIGH MADDA */\n      0x06E7, /* ARABIC SMALL HIGH YEH */\n      0x06E8, /* ARABIC SMALL HIGH NOON */\n      0x06EA, /* ARABIC EMPTY CENTRE LOW STOP */\n      0x06EB, /* ARABIC EMPTY CENTRE HIGH STOP */\n      0x06EC, /* ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE */\n      0x06ED, /* ARABIC SMALL LOW MEEM */\n    ];\n\n  function characterMapContains(c) {\n    for (var i = 0; i < charsMap.length; ++i) {\n      if (charsMap[ i ][0] === c) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function getCharRep(c) {\n    for (var i = 0; i < charsMap.length; ++i) {\n      if (charsMap[ i ][0] === c) {\n        return charsMap[i];\n      }\n    }\n\n    return false;\n  }\n\n  function getCombCharRep(c1, c2) {\n    for (var i = 0; i < combCharsMap.length; ++i) {\n      if (combCharsMap[i][0][0] === c1 && combCharsMap[i][0][1] === c2) {\n        return combCharsMap[i];\n      }\n    }\n\n    // We should never reach here...\n    // istanbul ignore next\n    return false;\n  }\n\n  function isTransparent(c) {\n    for (var i = 0; i < transChars.length; ++i) {\n      if (transChars[i] === c) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function getOriginalCharsFromCode(code) {\n    var j;\n\n    for (j = 0; j < charsMap.length; ++j) {\n      if (charsMap[j].indexOf(code) > -1) {\n        return String.fromCharCode(charsMap[j][0]);\n      }\n    }\n\n    for (j = 0; j < combCharsMap.length; ++j) {\n      if (combCharsMap[j].indexOf(code) > -1) {\n        return String.fromCharCode(combCharsMap[j][0][0]) +\n              String.fromCharCode(combCharsMap[j][0][1]);\n      }\n    }\n\n    return String.fromCharCode(code);\n  }\n\n  return {\n    convertArabic: function(normal) {\n      var crep,\n        combcrep,\n        shaped = '';\n\n      for (var i = 0; i < normal.length; ++i) {\n        var current = normal.charCodeAt(i);\n        if (characterMapContains(current)) {\n          var prev = null,\n              next = null,\n              prevID = i - 1,\n              nextID = i + 1;\n\n          /*\n           Transparent characters have no effect in the shaping process.\n           So, ignore all the transparent characters that are BEFORE the\n           current character.\n           */\n          for (; prevID >= 0; --prevID) {\n            if (!isTransparent(normal.charCodeAt(prevID))) {\n              break;\n            }\n          }\n\n          prev = (prevID >= 0) ? normal.charCodeAt(prevID) : null;\n          crep = prev ? getCharRep(prev) : false;\n          if (!crep || crep[2] == null && crep[3] == null) {\n            prev = null; // prev character doesn’t connect with its successor\n          }\n\n          /*\n           Transparent characters have no effect in the shaping process.\n           So, ignore all the transparent characters that are AFTER the\n           current character.\n           */\n          for (; nextID < normal.length; ++nextID) {\n            if (!isTransparent(normal.charCodeAt(nextID))) {\n              break;\n            }\n          }\n\n          next = (nextID < normal.length) ? normal.charCodeAt(nextID) : null;\n          crep = next ? getCharRep(next) : false;\n          if (!crep || crep[3] == null && crep[4] == null) {\n            next = null; // next character doesn’t connect with its predecessor\n          }\n\n          /* Combinations */\n          if (current === 0x0644 && next != null &&\n            (next === 0x0622 || next === 0x0623 || next === 0x0625 || next === 0x0627)) {\n            combcrep = getCombCharRep(current, next);\n            if (prev != null) {\n              shaped += String.fromCharCode(combcrep[4]);\n            } else {\n              shaped += String.fromCharCode(combcrep[1]);\n            }\n\n            ++i;\n            continue;\n          }\n\n          crep = getCharRep(current);\n\n          /* Medial */\n          if (prev != null && next != null && crep[3] != null) {\n            shaped += String.fromCharCode(crep[3]);\n            continue;\n          } else /* Final */\n            if (prev != null && crep[4] != null) {\n              shaped += String.fromCharCode(crep[4]);\n              continue;\n            } else /* Initial */\n            if (next != null && crep[2] != null) {\n              shaped += String.fromCharCode(crep[2]);\n              continue;\n            } else /* Isolated */ {\n              shaped += String.fromCharCode(crep[1]);\n            }\n        } else {\n          shaped += String.fromCharCode(current);\n        }\n      }\n\n      return shaped;\n    },\n\n    // convert from Arabic Presentation Forms B\n    convertArabicBack: function(apfb) {\n      var toReturn = '',\n          selectedChar;\n\n      var i;\n\n      theLoop:\n      for (i = 0; i < apfb.length; ++i) {\n        selectedChar = apfb.charCodeAt(i);\n\n        toReturn += getOriginalCharsFromCode(selectedChar);\n      }\n\n      return toReturn;\n    },\n  };\n}));\n"],"names":["root","factory","a","$ae717106aef8929f$exports","charsMap","combCharsMap","transChars","getCharRep","c","i","length","isTransparent","convertArabic","normal","crep","combcrep","shaped","current","charCodeAt","characterMapContains","prev","next","prevID","nextID","getCombCharRep","c1","c2","String","fromCharCode","convertArabicBack","apfb","toReturn","getOriginalCharsFromCode","code","j","indexOf","define","amd","$c1ce9d969bfa6909$var$element","document","getElementById","$c1ce9d969bfa6909$var$unicodeVal","$c1ce9d969bfa6909$var$originalString","innerText","console","log","$c1ce9d969bfa6909$var$arabicString","__esModule","default","codePointAt","toString","$c1ce9d969bfa6909$var$spanWrapper","charAt","innerHTML","$c1ce9d969bfa6909$var$spanEffect","querySelectorAll","$c1ce9d969bfa6909$var$isolatedUnicodes","forEach","span","unicode","character","includes","style","color","onmousemove"],"version":3,"file":"index.db6212b9.js.map"}